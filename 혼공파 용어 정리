시험 정보
	컴프실 4-3부터 8장까지
	람다, 리스트 컴프렉션, 
	빈칸 채우기, 코드 만들기
	6장 예외처리부분도 트라이엑셉트, 파이너리 기억하
	7장 클래스 내부에서 초기화할때 쓰는 함수들 이름, 모듈에서도 메인으로 등장할건지 그렇지 않을때 쓰는 변수
	8장 기본적인것만 객체지향은 기본적인거만
	 


4-3
범위(range) : 특정 횟수만큼 반복해서 돌리고 싶을 때  for 반복문과 조합하여 사용
	- range(A) : 0부터 A-1까지 정수로 범위
	- range(A, B) : A부터 B-1까지 정수로 범위
	- range(A, B, C) : A부터 B-1까지 정수로 범위이고, 각각 C만큼의 차이를 가짐

역반복문 : 반대로 반복문 적용
	- range(4, 0 -1, -1):

while 반복문 : 리스트, 딕셔너리 내부의 요소를 특정 횟수만큼 반복

break 키워드 : 반복문 벗어날 때 사용
continue 키워드 : 현재 반복을 생략하고 다음 반복으로 넘어감

4-4
리스트에 적용 가능한 기본함수
min() : 최솟값
max() : 최댓값
sum() : 값

reversed() 함수 : 리스트 뒤집기
	- 앞에 list()를 붙여서 사용해야함
	- list(reversed(list_a))

enumerate() 함수 : 리스트 요소를 반복할 때 인덱스가 몇번인지 확인할 수 있음
	- for와 in 사이에 반복 변수 2개 넣을 수 있음

items() 함수 : 키와 값을 조합하여 반복문을 작성 가능

리스트 내포
	- 리스트 이름 = [표현식 for 반복자 in 반복할 수 있는 것]
	- 리스트 이름 = [표현식 for 반복자 in 반복할 수 있는 것 if 조건문]

join() 함수 : 리스트의 요소를 문자열로 연결
	- 문자열.join(문자열로 구성된 리스트)

이터러블 : 내부에 있는 요소들을 차례차례 꺼낼 수 있는 객체
	- 리스트, 딕셔너리, 문자열, 튜플 등

이터레이터 : 이터러블 중 next() 함수를 적용해 하나하나 꺼낼 수 있는 요소

5-1
함수를 호출 : 함수 사용

매개변수 : 함수 호출 시 괄호 내부에 넣는 여러 가지 자료

리턴값 : 함수를 호출하여 최종적으로 나오는 결과

가변 매개변수 : 매개변수를 원하는 만큼 받을 수 있다.
	- 하나만 사용 가능
	- 가변 매개변수 뒤에는 일반 매개변수가 올 수 없음

기본 매개변수 : 매개변수 값을 입력하지 않았을 경우 매개변수에 들어가는 기본값

키워드 매개변수 : 매개변수 이름을 지정해서 입력하는 매개변수

리턴값 : 함수의 결과

return 키워드 : 함수를 실행했던 위치로 돌아가게 함
	- 리턴 뒤에 자료를 입력하면 자료를 가지고 돌아감
	- 아무것도 리턴 안할시 none이 출력

재귀 함수
	- 재귀 : 자기 자신을 호출하는 것

피보나치 수열
1=1, 2=1, fibonachi(n-1) + fibonachi(n-2)

global() 함수 : 함수 내부에서 외부 함수를 참조할 때

메모화 : 메모된 결과값으로 출력을 빨리 할 수 있음

메모 : 딕셔너리를 사용해서 계산한 값을 저장

조기 리턴 

튜플 : 리스트와 비슷한 자료형이지만, 한번 결정된 요소는 바꿀 수 없음
	- (데이터, 데이터, ...)

***람다 : 매개변수로 함수를 전달하기 위해 함수구문을 작성하는 것이 번거롭고 
	코드 낭비라 생각될 때 함수를 간단하고 쉽게 선언하는 방법
	- lambda 매개변수 : 리턴값

콜백 함수 : 함수의 매개변수에 사용하는 함수


-- 함수를 매개변수로 사용하는 대표적인 표준 함수 --
map() 함수 : 리스트의 요소를 함수에 넣고 리턴된 값으로 새로운 리스트를 구성해 주는 함수

filter() 함수 : True인 것으로 새로운 리스트를 구성해줌

	- map(함수, 리스트)
----

파일 처리
	- 파일 열기 open() 함수 : 파일 객체 = open(문자열:파일 경로, 문자열: 읽기 모드)
		- w = write 모드
		- a = append 모드
		- r = read 모드
	- 파일 닫기 closed() 함수 ( open() 함수로 열면 닫아야함) : 파일객체.close()

	- with 키워드 : with 구문 종료 시 파일을 자동으로 닫음
		- with open(문자열:파일 경로, 문자열: 모드) as 파일 객체:
			문장
	-read() 함수 : 파일 객체.read()



제너레이터 표현식 : 이터레이터를 만들 때 사용함
	- yield 키워드를 함수에 사용하면 제너레이터 함수가 됨
	- next(이터레이터) : 내부의 요소를 꺼낼 수 있음.

기본 자료형 : 숫자, 문자열, 불 이며 스택에 차곡차곡 쌓임

객체 자료형 : 기본 자료형을 제외한 자료형이며, 힙에 저장됨

구문 오류 : 실행 전 오류
	- syntaxError

예외 또는 런타임 오류 : 실행 중 오류

기본 예외 처리
	- 조건문 사용 : .isdigit() 함수로 정수인지 확인
	- *** try, except구문 사용 : except에 print를 넣어 멈출 수도 있고, pass를 넣어 넘길 수도 있음
	- try, except, else 구문도 사용 가능
	- *** finally 구문 : 예외 처리 구문에서 가장 마지막에 사용
		- 오류가 발생해도 무조건 실행하는 구문

예외 객체 : 예외 발생 시 예외 정보가 저장되는 곳
	- except 예외의 종류 as 변수 이름:
		예외가 발생했을 때 실행할 구문
	- Exception : 모든 예외의 어머니
		- print(type(Exceptiond의 변수))으로 확인 가능

예외 처리 구문
	- valueError 
	- syntaxError 구문
	- indexError
	- typeError

raise 구문 : 강제로 예외를 발생시킴
	- raise 예외 객체

표준 모듈 : 파이썬에 기본적으로 내장되어있음

외부 모듈 : 다른 사람이 만들어서 공개한 것

math 모듈 : 수학관련 모듈
	- math.sin(), math.cos(), math.tan()

random 모듈 : 랜덤 모듈
	- random.random() = 0.0 <= x < 1.0
	- random.shoice(), random.sample()

sys 모듈 : 시스템 관련 정보를 가진 모듈

os 모듈 : 운영체제와 관련된 기능 가진 모듈

datetime 모듈 : 날짜, 시간과 관련된 모듈
	- date


** from 구문 : 일부 기능만 가져오고 싶을 때
	- from 모듈 이름 import 가져오고 싶은 변수 또는 함수들!

time 모듈 : 시간 관련 기능
	- time.sleep() 함수 : 특정 시간동안 코드 정지, 초단위로 입력

urllip 모듈 : url을 다루는 라이브러리
	- urlopen() : 해당 주소 웹페이지 열기

Beautiful Soup 모듈 : 웹 페이지 분석 모듈
	- select() : 여러개 태그 찾기
	- select_one() : 한개 태그 찾기

Django 모듈 : 다양한 기능 웹 개발 프레임워크

Flask 모듈 : 작은 기능 웹 개발 프레임워크
	
라이브러리 : 정상적인 제어하는 모듈

프레임워크 : 제어 역전이 발생하는 모듈

제어 역전이란? : 개발자가 모듈의 함수를 호출하는 것이 일반적인 흐름
		- 반대로 개발자가 만든 함수를 모듈이 실행하는 것

데코레이터 : @로 시작하는 구문, 꾸며주는 것

메인 또는 엔트리 포인트 :  - 프로그램의 진입점
	- 모듈의 __name__은 모듈 내부에서 __name__을 출력하면 모듈의 이름을 나타냄

__name__==“__main__” : 현재 파일이 엔트리 포인트인지 확인할 때 사용하는 코드


패키지 관리 시스템
	- pip
	- 패키지 : 모듈이 모여서 구조를 이룬 것

__int__.py 파일 : 패키지 내부의 모듈들을 한번에 가져오고 싶을 때
	- __all__ = ["모듈 파일", " 모듈 파일"]

main_1.py 파일에서 사용시  from test_package import *

텍스트 데이터 : 우리가 쉽게 읽을 수 있는 형태의 데이터
		- 컴퓨터는 내부적으로 모든 처리를 이진숫자로 수행
바이너리 데이터 : 텍스트 에디터로 열었을 때 의미를 이해할 수 없는 데이터
		- 이미지, 동영상 등

인코딩 : 텍스트 데이터나, 바이너리 데이터를 읽어 우리가 보기 쉽게, 보기 위해 변환한 것.

디코딩 : 반대 과정

file = open("output.png", "wb")란 b를 붙여야 바이너리 쓰기 모드이다.

객체 지향 프로그래밍 : 객체를 우선으로 생각해서 프로그래밍함.
		- 클래스를 기반으로 객체를 만듬

클래스 : 객체를 조금 더 효율적으로 생성하기 위함

클래스 선언 형태 :
		class 클래스 이름:
			클래스 내용

인스턴스 : 클래스 기반으로 만들어진 객체
	- 형태 :
		인스턴스 이름(변수이름) = 클래스 이름() ->이걸 생성자 함수라고 부름

생성자 : 클래스 이름

	class 클래스 이름:
		def __init__(self, 추가적인 매개변수):
			pass

메소드 : 클래스가 가지고 있는 함수

	class 클래스 이름:
		def 메소드 이름(self, 추가적인 매개변수):
			pass

isinstance() 함수 : 객체가 어떤 클래스로부터 만들어졌는지 확인
		- ininstance(인스턴스, 클래스)

__str__() 함수 정의하면 str()함수 호출할 때 __str__() 함수가 자동으로 호출됨.

__eq__ : equal 같다.
__ne__ : notequal 다르다.

클래스 변수 : class 구문 바로 아래에 변수를 선언
	- class 클래스 이름:
		클래스 변수 = 값
	
	- 접근 시 = 클래스 이름.변수 이름'

클래스 함수 : 클래스가 가진 함수
	- 데코레이터 : @classmethod
	- 형태  :
		class 클래스 이름:
			@classmethod
`			def 클래스 함수(cls, 매개변수):
				pass

	- 호출 시 = 클래스 이름.함수 이름(매개변수)


